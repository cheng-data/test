6. 学习Java的异常处理，但更重要的是学习什么时候用特殊返回值而不使用异常，什么时候应该抛出异常而不处理异常，知道什么是pokemon catch及其
危害，了解为什么Java的checked exception是一个糟糕的特性。如果愿意，同时学习一下Java1.7的try-with-resource语句和AutoCloseable接口。
一、java的异常处理
  来，首先对异常有一个大体的了解。
  异常主要是指一种意想不到处理的情况，你感觉没问题但偏偏有问题。如文件找不到、非法的参数、网络失败让你大骂“我曹”的事件。
  它发生在程序运行期间，干扰了程序的正常运行。                    |-----stackoverflowerror
                          |----------------virtualmachinerror|
            -----    error|                                  |-----outofmemoryerror
           |              |-----------------AWTerror
           |
  throwable|                                                  -----eofException
           |              |----------------------IOException|
           |              |                                   -----filenotfoundException
           ------exception|                                 |------arrithmeticException
                          |                                 |------missingresourceException
                          |-----------------runtimeException|------classnotfoundException
                                                            |-------nullpointerException
                                                            |-------illegalArgumentException
                                                            |-------ArrayindexOutofBoundsException
                                                            |-------UnkonwnTypeException
在 Java 中，所有的异常都有一个共同的祖先 Throwable（可抛出）。Throwable 指定代码中可用异常传播机制通过 Java 应用程序传输的任何问题的共性。
Throwable： 有两个重要的子类：Exception（异常）和 Error（错误），二者都是 Java 异常处理的重要子类，各自都包含大量子类。
  (1)error
    此类代表程序自身无法解决的错误。主要是jvm出了问题，上面也说了，栈溢出，内存溢出。
  (2)exception
    是程序本身可以处理的异常。(error和exception的区别就是是否可以程序本身可以处理).
    异常有一个重要子类为runtimeException,RuntimeException 类及其子类表示“JVM 常用操作”引发的错误,如空值对象引用(NullPointerException)
    除数为0(ArithmeticException)和数组越界(ArrayIndexOutOfBoundException)
    (a)java异常(包含error和exception)通常分为可查的异常和不可查的异常
      (i)可查的异常(编译器必须处理的异常),除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常
      的特点是Java编译器会检查它,要么用try-catch-finally捕获它,要么用throw抛出它.
      (ii)不可查异常(包括runtimeException和error),编译器不强制处理的异常。runtimeException能编译，error不一定。
    (b)单纯异常(exception)可以分为两类:
      (i)运行时异常(RuntimeException)如NullPointerException(空指针异常),这类异常是不检查异常，程序可以选择捕捉，也可以不处理，
       这类异常通常为逻辑上的错误导致的。运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有
       用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。
      (ii)非运行时异常 （编译异常）：是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须
      进行处理的异常，如果不处理，程序就不能编译通过。
    
    (c)处理异常的机制
      (i)抛出异常:当一个方法出现错误引发异常时，方法创建异常对象并交付运行时系统，异常对象中包含了异常类型和异常出现时的
      程序状态等异常信息。运行时系统负责寻找处置异常的代码并执行。
      (ii) 捕获异常：在方法抛出异常之后，运行时系统将转为寻找合适的异常处理器（exception handler）。
      
      对于运行时异常、错误或可查异常，Java技术所要求的异常处理方式有所不同.
        (i)对于运行时异常，根据经验，java虚拟机能够自行处理。由于运行时异常的不可查性，当然，数组越界，空值指针引用，都不想，但是很难
        察觉，当然察觉了也就自己改了。这部分java规定，将由Java运行时系统自动抛出，允许应用程序忽略运行时异常。
        (ii)对于错误(error), 当方法不进行捕捉(try-catch-finally)时,Java允许该方法不做任何抛出声明。因为error是不被允许出现的
        情况，所以对于合理地程序，不应该对error进行捕捉
        (iii)对于所有的可查异常，Java规定：一个方法必须捕捉，或者声明抛出方法之外。也就是说，当一个方法选择不捕捉可查异常时，
        它必须声明将抛出异常。因为该异常是可查的。
        
        一个方法所能捕捉的异常，一定是Java代码在某处所抛出的异常。简单地说，异常总是先被抛出，后被捕捉的。
   (d)捕获异常的语句
      (i)try-catch
            try{
            } catch(type1 id1){
            }
            catch(trpe2 id2){
            }
            
            例1  捕捉throw语句抛出的“除数为0”异常
            public class TestException {  
                public static void main(String[] args) {  
                int a = 6;  
                int b = 0;  
                try { // try监控区域  
              
                  if (b == 0) throw new ArithmeticException(); // 通过throw语句抛出异常  
                  System.out.println("a/b的值是：" + a / b);  
                }  
                catch (ArithmeticException e) { // catch捕捉异常  
                System.out.println("程序出现异常，变量b不能为0。");  
                }  
                System.out.println("程序正常结束。");  
                }  
          }
          运行结果：程序出现异常，变量b不能为0。

                    程序正常结束。
          例2  捕捉运行时系统自动抛出“除数为0”引发的ArithmeticException异常。
          public static void main(String[] args) {  
              int a = 6;  
              int b = 0;  
              try {  
                  System.out.println("a/b的值是：" + a / b);  
              } catch (ArithmeticException e) {  
                  System.out.println("程序出现异常，变量b不能为0。");  
              }  
              System.out.println("程序正常结束。");  
            }  
          }
          运行结果：程序出现异常，变量b不能为0。

                  程序正常结束。
      (ii) try－catch-finally语句
          try {  
              // 可能会发生异常的程序代码  
          } catch (Type1 id1) {  
              // 捕获并处理try抛出的异常类型Type1  
          } catch (Type2 id2) {  
              // 捕获并处理try抛出的异常类型Type2  
          } finally {  
              // 无论是否发生异常，都将执行的语句块  
          }  
          
          例子
            public class TestException {  
               public static void main(String args[]) {  
               int i = 0;  
               String greetings[] = { " Hello world !", " Hello World !! ",  
                    " HELLO WORLD !!!" };  
               while (i < 4) {  
                  try {  
                      // 特别注意循环控制变量i的设计，避免造成无限循环  
                      System.out.println(greetings[i++]);  
                  } catch (ArrayIndexOutOfBoundsException e) {  
                      System.out.println("数组下标越界异常");  
                  } finally {  
                      System.out.println("--------------------------");  
                  }  
              }  
          }  
        }
        
        运行结果:
          Hello world !
          --------------------------
          Hello World !!
          --------------------------
          HELLO WORLD !!!
          --------------------------
          数组下标越界异常
          --------------------------
      
      例5中的try语句这样设计
      try {  
      System.out.println (greetings[i]); i++;  
      }
      会出现死循环.因为i越界，直接被捕获，i没有在++，所以一直死循环
      小结:
        try 块：用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。
        catch 块：用于处理try捕获到的异常。
        finally 块：无论是否捕获或处理异常，finally块里的语句都会被执行。当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。在以下4种特殊情况下，finally块不会被执行：
        1）在finally语句块中发生了异常。
        2）在前面的代码中用了System.exit()退出程序。
        3）程序所在的线程死亡。
        4）关闭CPU。
      
   (e)抛出异常的语句
      如果一个方法可能会出现异常，但没有能力处理这种异常，可以在方法声明处用throws子句来声明抛出异常。
      throws语句用在方法定义时声明该方法要抛出的异常类型，如果抛出的是Exception异常类型，则该方法被声明为抛出所有的异常。多个异常
      可使用逗号分割。throws语句的语法格式为：
      methodname throws Exception1,Exception2,..,ExceptionN  
      {  
      } 
      当方法抛出异常列表的异常时，方法将不对这些类型及其子类类型的异常作处理，而抛向调用该方法的方法，由他去处理
      例子
      import java.lang.Exception;  
      public class TestException {  
        static void pop() throws NegativeArraySizeException {  
          // 定义方法并抛出NegativeArraySizeException异常  
          int[] arr = new int[-3]; // 创建数组  
        }  
  
       public static void main(String[] args) { // 主方法  
          try { // try语句处理异常信息  
            pop(); // 调用pop()方法  
          } catch (NegativeArraySizeException e) {  
            System.out.println("pop()方法抛出的异常");// 输出异常信息  
          }  
        }  
  
      } 
      结果: pop方法没有处理异常NegativeArraySizeException，而是由main函数来处理。
      
      throw抛出异常的规则
       1) 如果是不可查异常（unchecked exception），即Error、RuntimeException或它们的子类，那么可以不使用throws关键字
       来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。

       2）必须声明方法可抛出的任何(敲黑板，重点)可查异常（checked exception）。即如果一个方法可能出现受可查异常，要么用try-catch语句
       捕获，要么用throws子句声明将它抛出，否则会导致编译错误

       3)仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。

       4）调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被
       覆盖方法所声明异常的同类或子类。
   
   (f)自定义异常(自定义异常类)
      public class myexception extends Exception{
        public myexception(){}
        public myexception(String smg){
          super(smg);
          System.out.print(smg);
        }
      }
      使用
      public void test() throws myexception{
        try{
        }catch(type ide){
          throw new myexception();
        }
      }
      
      
  (3)什么是有用特殊返回值而不适用异常。   
    从逻辑上讲，函数的返回值是它的求值结果，是“预期的”、“正常的”结束函数求值得到的结果，而异常是发成错误，函
    数求值无法正常进行的时候必须处理的情况。
    从逻辑上讲，函数的返回值是它的求值结果，是“预期的”、“正常的”结束函数求值得到的结果，而异常是发成错误，函数求值无法正常
    进行的时候必须处理的情况。
    不要随便抛出异常的意思，是指确实是异常情况才抛出异常，有些不属于异常情况，只是单纯的为了方便处理，就不建议抛出异常。举个
    例子，FileNotFoundException，对于一些应用，其确实表示异常，因为系统的某个部分引用了错误的文件信息；而对于一个文件管理应
    用，如果这个文件路径是用户输入的，则该种情况即不属于异常情况，应该明确地告诉给用户：指定的文件路径有误。检查入参是否为空，是否
    需抛出异常，需要视具体情况而定。
  (4)什么时候应该抛出异常而不处理异常
    首先注意到一个原则:仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常
    当方法的调用者无力处理该异常的时候，应该继续抛出
  (5) 知道什么是pokemon catch及其危害   
    抱歉这部分找不到
  (6)了解为什么Java的checked exception是一个糟糕的特性。
    可查异常:上面已经提到,可查的异常(编译器必须处理的异常),除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常
      的特点是Java编译器会检查它,要么用try-catch-finally捕获它,要么用throw抛出它.
   
   
   
   
   
      
