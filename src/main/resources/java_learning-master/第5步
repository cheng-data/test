5. 学习Java的面向对象编程，包括类、修饰符、引用类型和值类型的区别、成员、方法、访问控制、继承、多态、接口、接口实现。
顺便学习一下面向对象的基本思想，即对象、消息、封装、继承、多态等，这些通用的内容不是Java特有的。
(1)类
  java类的基本构成：包，引入，类，变量，方法，注释
  package mypackage             //定义包
  import java.util.*            //引入类
  
  public class helloworld{      //定义类
    private String hello = "helloworld";    //变量
    public void say(){                        //方法
        System.out.println(hello);
    }
  }
  
  包：我们把功能相似的类放在一个包中
  引入(import):引入类后就能用类中的各种函数功能
  类：java程序的基本单位
  变量，函数就不多说了。
(2)修饰符
  a类的修饰符
    抽象类 abstract(注意抽象类与接口的区别)
      抽象类就是没有具体对象的概念类，抽象类是它所有子类的公共属性的集合
      比如：我们要描述“水果”，它就是一个抽象，它有质量、体积等一些共性（水果有质量），
      但又缺乏特性（苹果、橘子都是水果，它们有自己的特性），我们拿不出唯一一种能代表水果的东西
      在面向对象领域，抽象类主要用来进行类型隐藏。我们可以构造出一个固定的一组行为的抽象描述，但是这组行为却能够有任意个可能的具体实现方式。
      这个抽象描述就是抽象类，而这一组任意个可能的具体实现则表现为这个抽象类的所有派生类。
      抽象类提供了继承的概念，它的出发点就是为了继承，否则它没有存在的任何意义。所以说定义的抽象类一定是用来继承的，同时在
      一个以抽象类为节点的继承关系等级链中，叶子节点一定是具体的实现类。
         1、抽象类不能被实例化，实例化的工作应该交由它的子类来完成，它只需要有一个引用即可。
         2、抽象方法必须由子类来进行重写。
         3、只要包含一个抽象方法的抽象类，该方法必须要定义成抽象类，不管是否还包含有其他方法。
         4、抽象类中可以包含具体的方法，当然也可以不包含抽象方法。
         5、子类中的抽象方法不能与父类的抽象方法同名。
         6、abstract不能与final并列修饰同一个类。
         7、abstract 不能与private、static、final或native并列修饰同一个方法。、
    最终类 final
      如果一个类被final修饰，则这个类不可能有子类
      被定义为final的类通常是一些有固定作用、用来完成标准功能的类
      如Socket等类
  b变量的修饰符
    静态变量 static
      如果你想要处理的东西是整个程序中唯一的，弄成静态是个好方法。非静态的东西你修改以后只是修改了他自己的数据，但是不会影响其他同类对象的数据。
      静态变量是类中所有对象的共享的变量，是公共的存储单元
      标记一个变量为static，则该变量在内存中有不变的位置，相当于全局变量，所有类的实例都访问同一个存储变量区域。
      对其修改对于所有类的实例来说都是可见和一致的。
      注意，敲黑板：static变量在编译时已经分配内存，
      定义static变量是称为静态变量 也是局部变量
      谁说全局就不能改变值了，除非是 static final声明，就成常量了，就不能改了
    最终变量 final
      其修饰代表常量，不可改变，修饰的同时指出常量的具体取值
    final static ....代表全局常量
    异失变量 volatile
      如果一个域被volatile修饰，则说明其可能同时被多个线程所控制、修改，即此域不仅仅被当前程序所掌握，在运行过程中极有可能受到其他线程的影响
      volatile String world = "world";
      通常volatile用来修饰解释外部输入的量，如表示当前时间的变量，后台线程随时修改。
  c方法的修饰符
    抽象方法 abstract
      此方法仅有方法头，没有具体的方法体和操作实现的方法。其目的是为了所有子类对外呈现一个相同名字的方法，是一个统一的接口。所有抽象方法必须存在
      与抽象类中。
      该方法必须由子类来实现，才能被调用。
    静态方法 static
      可以像调用静态变量一样，直接通过类名调用静态方法。(Hello.say())
      调用此方法时用类名做前缀。此方法只能处理属于整个类的成员变量
    最终方法 final
      功能和内部语句不能再更改，不能再被继承
    同步方法 synchronized
      如果其修饰的是类的方法（static的方法，静态方法），在被调用执行前，将把系统类class中对应当前类的对象加锁。
      如果其修饰的是对象的方法（没有static修饰的方法），在被调用执行前，把当前对象加锁。
(3)引用类型与值类型的区别
  跟之前说的差不多，传的是引用还是值
  引用类型表示你操作的数据是同一个，也就是说当你传一个参数给另一个方法时，你在另一个方法中改变这个变量的值，
  那么调用这个方法是传入的变量的值也将改变.
  值类型表示复制一个当前变量传给方法，当你在这个方法中改变这个变量的值时，最初生命的变量的值不会变.
  值类型：
    也就是基本数据类型
  引用类型：
    除了四类八种基本类型外，所有的类型都称为引用类型（数组，类，接口，字符串）
(4)成员
  java类有成员和方法
  成员就是指 某一类事物的属性
  例如 人类的属性有：姓名 性别 年龄等
  public class Student {
    private String name ;//name是Student的成员变量
    public String getName(){ //getName就是成员方法，定义在Student中的方法
      return this.name ;
    }
  }
(5)方法
  就是函数，所谓方法,就是用来解决一类问题的代码的有序组合,是一个功能模块。
(6)访问控制
  访问控制符
    可见/访问性	在同一类中	同一包中	不同包中 	同一包子类中 	不同包子类中 
    public	    yes	      yes	     yes	    yes	         yes                      任意地方都可以访问
    protected 	yes	      yes	     no	      yes	         yes                      同一包和子类可以访问
    package 	  yes	      yes	     no	      yes	         no
    private	    yes	      no	     no	      no	         no                       仅该类内部可访问
    （1） 在java中有public、protected、private三种显示的修饰符用于控制可见性，package不是显示的修饰符，
         它是隐含的，即如果在类、变量等前没加显示的可见性修饰符，那它就是package级别的。如果在类的定义中没有指定package，
         那么java会把它放在缺省包中，一般来说这个缺省的包就是当前目录。
    （2）在子类中的方法如果重载了父类的方法，那么该方法的可见级别应更底或者相同，如父类中的方法是public，
        那么子类中方法必须是public。
    （3）在java中，一般来说，变量成员最好是private，对它们的访问可以通过public的方法，在这些方法中可以做些控制以保证数据
        的一致性。这些方法名一般以get和set做为前缀。
(7)继承
  继承就是继承父类的遗产，就是使用已存在的类的定义作为基础建立新的类，新类的定义可以增加新的数据和功能，也可以用父类的功能，其
  使得复用以前的代码十分地方便。
  抽象类(abstract)必须被继承，最终类(final)不能被继承
  用extends来继承
  class car{
    int v;//速度
    void drive(){
      System.out.print("car速度是" + v);
    }    
  }
  class bus extend car{
    int p;//人数
    void carry(){
      System.out.print("bus载人" + p);
    }
    void sum(){
       System.out.print("bus速度是" + v);
      System.out.print("bus载人" + p);
    }
  }
  此时测试用例
  car ca = new car();
  bus bu = new bus();
  ca.v = 60;
  bu.v = 40;
  bu.p = 20;
  ca.drive();  car速度是60
  bu.drive();  car速度是40
  bu.carry();  bus载人20
  bu.sum();    bus速度是40,bus载人20
  子类包含父类的所有成员，但是无法访问父类中被private修饰的成员(变量或函数)
  注意this和super的使用，用法如下
  (1)this防止父类中也有p
  class bus extend car{
    int p;//人数
    void carry(){
      System.out.print("bus载人" + this.p);
    }
    void sum(){
       System.out.print("bus速度是" + v);
      System.out.print("bus载人" + this.p);
    }
  }
  (2)super直接访问父类中的成员
  class bus extend car{
    int p;//人数
    void carry(){
      System.out.print("bus载人" + p);
    }
    void sum(){
       System.out.print("bus速度是" + super.v);
      System.out.print("bus载人" + p);
    }
  }
  (3)this还有一种用法,this.实参
  class car{
  int v;
    void car(int v){ //构造函数
      this.v = v;
    }
  }
(8)多态（方法的覆盖，重载，重写）
  在子类继承父类之后，子类就拥有了父类的成员变量和方法，但是可能子类中有与父类同名的变量和方法，同一个类内部，也可以有同名的，参数列表
  不同的方法，这就是多态，即同一个名字有多种实现状态。
  多态通过方法的覆盖，重载，重写来实现
  (a)覆盖---------继承了父类的同名无参函数
  class car{
    int v;//速度
    void drive(){
      System.out.print("car速度是" + v);
    }    
  }
  class bus extend car{
    int p;//人数
    void drive(){
      System.out.print("bus速度是" + v);
    }
    void carry(){
      System.out.print("bus载人" + p);
    }
    void sum(){
       System.out.print("bus速度是" + v);
      System.out.print("bus载人" + p);
    }
  }
  car ca = new car();
  bus bu = new bus();
  ca.v = 60;
  bu.v = 40;
  bu.p = 20;
  ca.drive();  car速度是60
  bu.drive();  bus速度是40
  bu.carry();  bus载人20
  bu.sum();    bus速度是40,bus载人20
  (b)重载---------继承了父类的同名有参函数
  class bus extend car{
    int p;//人数
    void drive(){
      System.out.print("bus速度是" + v);
    }
    void drive(int v){
      System.out.print("bus速度是" + v);
    }
    void carry(){
      System.out.print("bus载人" + p);
    }
    void sum(){
       System.out.print("bus速度是" + v);
      System.out.print("bus载人" + p);
    }
  }
  测试用例
  bu.drive(100);输入参数即可，区别只是在于参数不同
  (c)重写-------------当前类的同名方法
  通过方法的重写，一个类中可以有多个相同名字的方法，由传递给他们参数的类型和个数不同来区分，注意的是，重写的方法是当前类内的同名
  方法，不是父类中的方法。
  class bus extend car{
    int p;//人数
    void drive(){
      System.out.print("bus速度是" + v);
    }
    void carry(){
      System.out.print("bus载人" + p);
    }
    void carry(int t){
      System.out.print("bus载人" + t);
    }
    void sum(){
       System.out.print("bus速度是" + v);
      System.out.print("bus载人" + p);
    }
  }
  carry和carry(int t)区分调用
(9)接口
  java只支持单一继承，为了能够多重继承，我们利用接口实现多重继承
  一个类只有一个直接父类，但可以有多个接口
  (a)接口的含义：
  接口是一系列方法的声明，是一些方法特征的集合，接口只有方法的特征没有方法的实现，所以这些方法能在不同的地方被不同的类实现。
  而这些实现可以具有不同的行为(功能)
  关键字:interface
  接口中定义的方法形式如下，成员变量可以被static,final修饰:
  public interface 接口名{
    public 返回值类型 方法名(......)
    public static int a = 1;
    public final int b = 2;
  }
  (b)一个类要使用某个接口：关键字implements
    public class myclass implements 接口名{
    }
  (c)接口和抽象类的区别
    (1)抽象类可以提供实现方法，接口不行。java中抽象类可以提供某些方法的部分实现，如果向某个抽象类中填入一个新的方法，那么他所有的
    子类都可以拥有这个新方法，
    (2)抽象类只能继承一个，但可以实现多个接口
    抽象类的实现只能通过子类给出，但一个子类只能继承一个父类，但是一个子类可以实现任意多个接口。
  (d)接口的特点
    1、Java接口中的成员变量默认都是public,static,final类型的(都可省略),必须被显示初始化,即接口中的成员变量为常量(大写,单词之间用"_"分隔)

    2、Java接口中的方法默认都是public,abstract类型的(都可省略),没有方法体,不能被实例化

    3、Java接口中只能包含public,static,final类型的成员变量和public,abstract类型的成员方法

    4、接口中没有构造方法,不能被实例化

    5、一个接口不能实现(implements)另一个接口,但它可以继承多个其它的接口

    6、Java接口必须通过类来实现它的抽象方法

    7、当类实现了某个Java接口时,它必须实现接口中的所有抽象方法,否则这个类必须声明为抽象类

    8、不允许创建接口的实例(实例化),但允许定义接口类型的引用变量,该引用变量引用实现了这个接口的类的实例

    9、一个类只能继承一个直接的父类,但可以实现多个接口,间接的实现了多继承.
(10)接口的实现(实例)
  interface Flyanimal{     
   void fly();  
  }
  class Insect {     
   int legnum=6;  
  } 
  class Bird {     
    int legnum=2;  
    void egg(){};  
  } 
  class Ant extends Insect implements  Flyanimal {  
    public void fly(){  
       System.out.println("Ant can  fly");  
    }  
  } 
  class Pigeon extends Bird implements  Flyanimal {  
    public void fly(){  
       System.out.println("pigeon  can fly");  
    }  
    public void egg(){  
      System.out.println("pigeon  can lay  eggs ");  
    }  
  }
  public class InterfaceDemo{  
    public static void main(String args[]){  
      Ant a=new Ant();  
      a.fly();                                           //Ant can  fly
      System.out.println("Ant's legs are"+ a.legnum);   //Ant'slegs  are 6
      Pigeon p= new Pigeon();  
      p.fly();                                          //pigeon  can fly
      p.egg();                                          //pigeon  can lay  eggs
    }  
  }  
(11)面向对象   对象、消息、封装、继承、多态
  (a)对象：
    对象是一个模型。比如，你要做一个和建筑相关的软件。那么在整个软件中肯定会经常出现砖，钢筋等这些物体。
    你如果每次遇到都定义一遍砖的属性肯定很麻烦，那么这个时候你就可以定义一个对象---砖，将它的属性封装起来。
    然后每次遇到时候直接调用就可以了。
  (b)消息
    书中曰:消息是对象间通信的手段,一个对象通过向另一对象发送消息来请求其服务
  (c)封装
    利用访问控制符等等
    (1)将事物的内部实现细节隐藏起来
    (2)对外提供一致的公共的接口---间接访问隐藏数据
    (3)可维护性
  (d)继承、多态已经在上面叙述，此处就不细说了。
    
  
  
  
  
  
  
