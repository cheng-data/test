第4步
4. 学习Java的面向过程编程，包括基本数据结构、表达式、语句、控制流、函数调用。
java数据结构：
(1)首先我们先来了解基本的数据结构：
   数据结构是指计算机组织数据的方式，数据元素之间存在什么关系。
   A：集合结构, 数据元素之间没有什么直接联系，他们唯一的关系为他们都属于这个集合，嗯，类似布朗运动。
   B：线性结构，集合中元素存在“一一对应”关系，集合中必定存在一个唯一的“第一个元素”，也必定存在唯一的“最后一个元素”，除最后元素之外，
               其它数据元素均有唯一的"后继"，除第一元素之外，其它数据元素均有唯一的"前驱"。
   C：树形结构，集合中元素存在“一对多的关系”，类似于家谱等。
   D：图形结构，集合中元素存在“多对多的关系”，关系错综复杂，嗯，网状结构。
   java常用的数据结构在第7步中讲，主要是java.util.*中的东西。
(2)java的表达式
   java中的表达式是变量、常量、运算符和方法调用的序列，其执行一个指定的运算并且返回某个确定的值。
   例如关系表达式“3<7”返回ture,7+2返回9等等。
   还有一种叫“表达式语句”，就是在表达式后加上分号作为语句来使用。(int i=123;)
   下面我将分别介绍变量、常量、运算符、方法等。
   A变量：
       一，概述：通常我们通过内存的地址找到内存的位置，从而知道内存中存储的数据，但是我们都清楚地址十分地不好记，于是我们给存储
                 数据的这个空间取名字，从而通过变量名更加简单方便地取出数据。变量是存储数据的基本单元，变量值可以发生改变。
                 或者说变量就是数据，可以改变的数据。
       二，变量命名规则：变量必须以字母、下划线"_"或"$"符号开头；变量可以包括数字，但不能以数字开头；
                         除了"_"或"$"符号以外，变量名不能包含任何特殊字符；不能使用Java语言的关键字，如int、class、public、void、static等
       三，变量的声明：数据类型 变量名 = 值（int i=123）
       四，就算变量没有赋值，当sizeof(变量名) != 0，应该为1，即便没有数据，其在内存中也占有空间。
       根据变量的作用范围，我们可以将变量分为：成员变量与局部变量
       成员变量：作为类的成员存在，直接存在于类中
       局部变量：作为方法的成员存在，存在于方法的参数列表和方法定义中。
       局部变量在使用前必须被程序员主动初始化，但是成员变量可以被系统提供一个默认的初始值，所以在语法上成员变量定义后可以使用，注意，只是语法
       上，局部变量定义后赋初值才能使用。
       例子
       public class Temp {  
               int t; //实例变量  
               public static void main（String args［］）{  
                  int t=1; //局部变量  
                  System.out.println（t）; //打印局部变量  
                  Temp a= new Temp（）; //创建实例  
                  System.out.println（a.t）; //通过实例访问实例变量  
               }  
       }
       结果为1,0 //成员变量有初始值
       
       成员变量可以分为实例变量和静态变量.
       静态变量之前要加static。
       静态变量属于静态存储方式，其存储空间为内存中的静态数据区（在 静态存储区内分配存储单元），该区域中的数据在整个程序的运行期间
       一直占用这些存储空间（在程序整个运行期间都不释放），也可以认为是其内存地址不变，直到整个程序运行结束
       区别：
       实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，
       而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。
       实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。
       下面是一个例子
       public class Temp {  
             static int t; //类变量，或者说静态变量
             public static void main（String args［］）{  
                  System.out.println（t）; //打印类变量  
                  int t=1; //局部变量  
                  System.out.println（t）; //打印局部变量  
                  Temp a= new Temp（）; //创建实例  
                  System.out.println（a.t）; //通过实例访问实例变量  
            }  
      }
      结果为0,1,0
   B常量：
       一，概述：与变量相对应，常量是不可改变的数据。
       二，作用：常量在程序中通常有两个作用：代表常数，增强程序的可读性。
       三，常量的声明：final 常量名 = 值（在Java编码规范中，要求常量名必须大写），例如：final PI = 3.1415926
   C基本数据类型：
       之前所说的变量、常量都是指数据，那么我们来详细说说数据的类型。
       Java语言提供了八种基本类型。六种数字类型（四个整数型（默认是int 型），两个浮点型（默认是double 型）），一种字符类型，还有一种布尔型。
       byte:              1Byte
       char,short:     2Byte
       int,float:          4Byte
       long,double:  8Byte
       byte:
            此类型为8位，有符号，以二进制补码表示的整数，占一个字节
            最小值是-128（-2^7）；
            最大值是127（2^7-1）；//此类型有一位用于做符号位
            其所表示的数据范围挺小的，此类型用在大型数组中节约空间，主要用来代替整数，byte变量所占空间只有int变量的1/4
       short:
            short数据类型是16位、有符号的以二进制补码表示的整数，占2字节
            最小值是-32768（-2^15）；
            最大值是32767（2^15 - 1）；//此类型有一位用于做符号位
            Short数据类型也可以像byte那样节省空间。一个short变量是int型变量所占空间的二分之一；
            例子：short s = 1000，short r = -20000。
       int:
            int数据类型是32位、有符号的以二进制补码表示的整数；占4字节
            最小值是-2,147,483,648（-2^31）；
            最大值是2,147,485,647（2^31 - 1）；
            例子：int a = 100000, int b = -200000。
       long:
            long数据类型是64位、有符号的以二进制补码表示的整数；占8字节
            最小值是-9,223,372,036,854,775,808（-2^63）；
            最大值是9,223,372,036,854,775,807（2^63 -1）；
            这种类型主要使用在需要比较大整数的系统上；
            例子： long a = 100000L，int b = -200000L。
            long a=111111111111111111111111(错误，整数型变量默认是int型)
            long a=111111111111111111111111L(正确，强制转换)
       float：
            float数据类型是单精度、32位、符合IEEE 754标准的浮点数；占4字节    -3.4*E38- 3.4*E38。。。浮点数是有舍入误差的
            float在储存大型浮点数组的时候可节省内存空间；
            默认值是0.0f；
            例子：float f1 = 234.5f。
            float f=6.26(错误  浮点数默认类型是double类型)
            float f=6.26F（转换正确，强制）
            double d=4.55(正确)
       double：
            double数据类型是双精度、64位、符合IEEE 754标准的浮点数；
            浮点数的默认类型为double类型；
            double类型同样不能表示精确的值，如货币；
            默认值是0.0d；
            例子：double d1 = 123.4。
       boolean：
            boolean数据类型表示一位的信息；
            只有两个取值：true和false；
            这种类型只作为一种标志来记录true/false情况；
            默认值是false；
            例子：boolean one = true。  
      char：
            char类型是一个单一的16位Unicode字符；用 ‘’表示一个字符。java 内部使用Unicode字符集。他有一些转义字符，2字节
            最小值是’\u0000’（即为0）；
            最大值是’\uffff’（即为65,535）；可以当整数来用，它的每一个字符都对应一个数字
   例子 char c1 = 'a';
   D对象数据类型
      基本数据类型在栈中进行分配，而对象类型在堆中进行分配。
      例如string对象，Date对象，数组对象等
      String world = "world";
      Date time = new Date();
      基本数据类型 byte short int      long float double char       boolean
      对象数据类型 Byte Short Integer  Long Float Double Character  Boolean
      以int为例：int是基本数据类型，Integer是对int进行了封装的一个类。 
                声明为int的变量不需要实例化，声明为Interger的变量需要实例化
                Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。Int是java的原始数据类型，Integer是java为int提供的封装类。
                int 一般做为数值参数就够了 
                integer 一般做类型转换的时候用的较多
                基本数据类型比较:
                if (a==b) 模式
                对象比较:
                对象.equals(对象)模式,比较是地址,不是比较内容
                所以string对象比较时使用equal
                "=="操作符的作用1、用于基本数据类型的比较2、判断引用是否指向堆内存的同一块地址。
                equals的作用：用于判断两个变量是否是对同一个对象的引用，即堆中的内容是否相同，返回值为布尔类型
                例子一：对象不同，内容相同，"=="返回false，equals返回true
                  String s1 = new String("java");
                  String s2 = new String("java");
                  System.out.println(s1==s2);            //false
                  System.out.println(s1.equals(s2));    //true
                例子二：同一对象，"=="和equals结果相同
                  String s1 = new String("java");
                  String s2 = s1;
                  System.out.println(s1==s2);            //true
                  System.out.println(s1.equals(s2));    //true
   E引用数据类型
      int a = 1; //基本数据类型
      Integer b = new Integer(1);// 引用数据类型
      Integer c = b;// 引用数据类型
      例如: Point x = new Point (0, 0);
            Point y = new Point (1, 1);
            System.out.println(x)
            System.out.println(y)
            输出为(0, 0),(1, 1)
            x = y;
            x.setlocation(5, 5);
            System.out.println(x)
            System.out.println(y)
            输出为(5, 5),(5, 5)，因为对于对象类型（或者说非基本数据类型），赋值的是对象引用，x和y都引用了同一个对象，x改变，y也改变。
   F数组数据类型
      int[] myarray = new int[5];
   G数据类型的转换
      数据类型转换有两种：
            （1） 自动类型转换：编译器自动完成类型转换，不需要在程序中编写代码； 
             规则：从存储范围小的类型到存储范围大的类型。 
             具体规则：byte→short(char)→int→long→float→double. 
             例如：byte  b1  =  100;
                   int  n  =  b1;数据不会丢失
                   注意问题:在整数之间进行类型转换时，数值不发生改变，而将整数类型，特别是比较大的整数类型转换成小数类型时，
                   由于存储方式不同，有可能存在数据精度的损失。
            （2） 强制类型转换：强制编译器进行类型转换，必须在程序中编写代码。该类型转换很可能存在精度的损失。 
            规则：从存储范围大的类型到存储范围小的类型。 
            具体规则：double→float→long→int→short(char)→byte. 
            语法格式为：(转换到的类型)需要转换的值
            例如：int  m  =  1234;
                 byte  b1  =  (byte)m;注意问题:强制类型转换通常都会存储精度的损失，需谨慎。
   H运算符
      算术运算符:+,-,*,/,%
      赋值运算符:=,+=,-+,*=,/=,%=
      关系运算符:==,!=,>,<,>=,<=
      自增/键:++,--
      逻辑运算符:&&,||,!,^
(3)java中的语句:与(4)中的控制流关系比较密切。
   java中的语句：
   a条件语句:
      if.....else if.........else..........
      switch(){
         case value1:
            ......
            break;
         case value2:
            ......
            break;
         .
         .
         .
         .
         default:
            ......
            break;
      }
   b循环语句:
      for(){
      }
      while(){
      }
      do(){
      }while()
   c控制语句:
      break
      continue
      c=a>b?a:b;
(5)函数调用
   注意如果函数（方法）的形参为基本数据类型，其传递的是值，形参的改变不会影响实参。
   如果函数（方法）的形参为数组、对象等非基本数据类型，，其传递的是引用，形参的改变会影响实参，在函数里面要注意。
   
   
     
   
       
       
